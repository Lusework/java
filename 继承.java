继承的概念：
被继承的类称为超类或父类，继承的类称为子类
通过继承，子类自动拥有父类所有的属性和方法，

注意：
继承只是代码重用的一种方式，只有当需要向新类添加新的操作，
并且把已存在的默认的行为融合进新类时，才需要继承已存在的类

方法的覆盖：
子类的自身方法中，若与继承过来的方法名具有相同的方法名，就构成了方法的重写（覆盖）
重写的主要优点是定义各子类的特有行为
如何才能构成重写？
若想构成重写，子类中的方法名与参数列表必须完全与被重写的父类相同，构成重写的几大规则
1；返回类型为基本类型时，则返回类型必须完全相同；若为对象引用类型，必须与被重写方法返回类型相同
2；访问级别的限制一定不能比被重写


java只支持单根继承
继承的好处：
1，提高了代码的复用性
2；让类与类产生了关系，给第三个特征多态提供了前提
继承的规则：
1；构造方法不能被继承；方法和属性可以继承
2；子类的构造方法自动调用父类的默认的构造方法
3；当父类没有默认构造方法，子类必须显示的调用父类的构造方法
final的用法：
放在方法前面,阻止方法覆盖
放在类前面，阻止继承
在属性前面表示常量


字符类中构造函数的特点：
在子类构造对象时，发现访问构造函数时，父类也运行了，这是为什么呢？
原因是：在子类构造函数的第一行代码有一个默认的隐式语句super（）

子类的实例化过程：
子类中所有构造函数默认都访问父类中空参数的构造函数

为什么子类实例化的时候要访问父类中的构造函数呢?是
因为自类继承了父类，就拥有父类的属性，所以在使用父类内容之前
要先清楚父类是怎么对自己的内容进行初始化的,所以子类在构建对象时
必须访问父类的构造函数，如果父类没定义空参数的构造函数
子类的构造函数必须用super声明要调用父类的哪个函数，同时子类构造函数中
如果使用了this调用了本类的构造函数时，super就没有了，因为super和this只能
定义第一行所以只有一个，可以保证的是子类中肯定有其他的构造函数访问父类
的构造函数

注意：super语句必须定义在子类构造函数的第一行
因为父类的初始化动作要先完成

继承的弊端：打破了封装性